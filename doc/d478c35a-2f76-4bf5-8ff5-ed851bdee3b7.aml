<?xml version="1.0" encoding="utf-8"?>
<topic id="d478c35a-2f76-4bf5-8ff5-ed851bdee3b7" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>In this chapter we discuss indexing and slicing a matrix. Indexing is a process of getting or setting individual matrix elements, e.g. to get the value in first row and second column we would pass 2 integer arguments to some "indexing" function. Matrix data is always stored in memory linearly in column major order so it is also possible to identify each element with just one integer index. This is called <quoteInline>linear indexing</quoteInline>.</para>
      <para>Slicing is a process of getting or setting part of a matrix (submatrix), e.g. to get elements in rows 1 and 3 and columns 2 and 4 as a new 2x2 matrix we would pass 2 series of integers: [1;3] and [2;4] to some "slicing" function. In case of linear slicing we only need to specify 1 series of integer indices of elements to choose. By series of integers we mean here F# seq&lt;int&gt; so we can pass int array, list or any object which implements IEnumerable&lt;int&gt;. The sequence does not have to be ordered and can have duplicates.</para>
		
		<alert class="note">
		  <para>All code examples below use <application>Matrix</application> type based on float, but they will work in generic case.</para>
		</alert>
	
		<alert class="note">
		  <para>When we get a slice of a matrix a new matrix is created so that memory is never shared between a matrix and its slice.</para>
		</alert>
		<alert class="note">
		  <para>Indexing is always zero based.</para>
		</alert>

    </introduction>
    
    <section address="Section1">
      <title>Linear indexing</title>
      <content>
        <para>Linear indexing requires only 1 integer argument:</para>
        
        <example>
        <code lang="F#">
        open Fmat.Numerics
        open Fmat.Numerics.MatrixFunction
        let m = ones [2;3] // 6 elements
        let x = m.[3] // get 4th element which is in second row and second column
        m.[3] &lt;- 2.0 // set 4th element to 2.0      
        </code>
        </example> 
            
      </content>
    </section>
    
    <section address="Section1">
      <title>Linear slicing</title>
      <content>
        <para>Linear slicing requires 1 sequence of integer indices to select elements. We can use "from..to" operator</para>
        
        <example>
        <code lang="F#">
        open Fmat.Numerics
        open Fmat.Numerics.MatrixFunctions
        let m = ones [2;3] // 6 elements
        let x = m.[1..3] // get 2nd, 3rd and 4th element
        m.[1..3] &lt;- 2.0 // set 2nd, 3rd and 4th element to 2.0   
        m.[1..] &lt;- 2.0 // starting at 2nd element set all to 2.0 
        m.[..3] &lt;- 2.0 // set first 4 elements to 2.0 
        m.[1..3] &lt;- Matrix([1.;2.;3.]) // set 2nd, 3rd and 4th element to 1 2 3
        </code>
        </example> 
       
        
        <para>We can also use a sequence of integers to select elements. If we set submatrix to scalar value we must use <quoteInline>Set</quoteInline> method </para>
        <example>
        <code lang="F#">
        open Fmat.Numerics
        open Fmat.Numerics.MatrixFunctions
        let m = ones [2;3]
        let x = m.[ {0..2..4} ] // 1st, 3rd and 5th element
        let y = m.[ [1;0;2] ] // 2nd, 1st and 3rd
        m.[ [1;0;2] ] &lt;- zeros [1;3]
        m.Set([1;0;2], 0.0)
        </code>
        </example>        
      </content>
    </section>    
    
    <section address="Section1">
      <title>Nonlinear indexing</title>
      <content>
        <para>Nonlinear indexing requires 1 integer argument for each matrix dimension:</para>
        
        <example>
        <code lang="F#">
        open Fmat.Numerics
        open Fmat.Numerics.MatrixFunctions
        let m = ones [2;3] 
        let x = m.[1, 1] // get element in second row and second column
        m.[1, 1] &lt;- 2.0 // set element in second row and second column to 2.0     
        </code>
        </example> 
        
        <para>If more than 4 dimensions then pass indices as int array:</para>
        <example>
        <code lang="F#">
        open Fmat.Numerics
        open Fmat.Numerics.MatrixFunctions
        let m = ones [2;3;4;5;2] 
        let x = m.[ [|1;2;2;3;1|] ]
        </code>
        </example>        
      </content>
    </section>    
    
     <section address="Section1">
      <title>Nonlinear slicing</title>
      <content>
        <para>Nonlinear slicing requires 1 sequence of integer indices for each matrix dimension. For 2D, 3D and 4D matrices we can use "from..to" operator:</para>
        
        <example>
        <code lang="F#">
        open Fmat.Numerics
        open Fmat.Numerics.MatrixFunctions
        let m = ones [3;4] 
        let x = m.[1..2, 1..3] // elements in rows 1 and 2 and columns 1, 2 and 3 
        m.[1..2, 1..3] &lt;- 2.0   
        m.[1..2, 1..3] &lt;- zeros [2;3]
        </code>
        </example> 
        
        <para>For any matrix we can use integer sequences. To set a submatrix to a scalar value we must use <quoteInline>Set</quoteInline> method</para>
        <example>
        <code lang="F#">
        open Fmat.Numerics
        open Fmat.Numerics.MatrixFunctions
        let m = ones [3;5] 
        let x = m.[{0..1}, {0..2..4} ] // select rows 0 and 1 and columns 0, 2 and 4
        let y = m.[[1;1], {0..4} ] // select 2nd row twice
        m.[[1;1], {0..4} ] &lt;- zeros [2;5]
        m.Set([1;1], {0..4}, 0.0) 
        </code>
        </example>        
      </content>
    </section> 
    
     <section address="Section1">
      <title>Boolean slicing</title>
      <content>
        <para>We can select matrix slice by using a boolean matrix created in matrix comparison, e.g. select elements greater than zero. We can also use user F# function which evaluates each matrix element to boolean and specifies which elements to choose. Result is a row vector with elements which meet the condition: </para>
        
        <example>
        <code lang="F#">
        open Fmat.Numerics
        open Fmat.Numerics.MatrixFunctions
        let m = Matrix([2;3], {1.0..6.0})
        let x = m.[m .> 2.0] // select elements greater than 2 into a row vector
        m.[m .> 2.0] &lt;- 0.0 // set elements greater than 2 to 0
        m.Set(m .> 2.0, ones [2;2]) // overwriting matrix can have any shape, but must have the same length as number of true values in comparison result
        let y = m.[fun x -&gt; x * x &gt; 2.0] //select elements whose square is greater than 2.0
        </code>
        </example> 
      </content>
    </section> 
  </developerConceptualDocument>
</topic>